// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.extsi %0 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc3)
    %4 = arith.muli %2, %3 : i64 loc(#loc3)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc3)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc3)
    %5 = arith.cmpi sle, %4, %c2147483647_i64 : i64 loc(#loc3)
    %6 = arith.cmpi sge, %4, %c-2147483648_i64 : i64 loc(#loc3)
    %7 = arith.andi %5, %6 : i1 loc(#loc3)
    %8 = arith.muli %0, %c64_i32_0 : i32 loc(#loc3)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %10 = tt.splat %8 : i32 -> tensor<64xi32> loc(#loc5)
    %11 = arith.extsi %10 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %12 = arith.extsi %9 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %13 = arith.addi %11, %12 : tensor<64xi64> loc(#loc5)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc5)
    %14 = arith.cmpi sle, %13, %cst : tensor<64xi64> loc(#loc5)
    %cst_3 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc5)
    %15 = arith.cmpi sge, %13, %cst_3 : tensor<64xi64> loc(#loc5)
    %16 = arith.andi %14, %15 : tensor<64xi1> loc(#loc5)
    %17 = arith.addi %10, %9 : tensor<64xi32> loc(#loc5)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc6)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc6)
    %18 = arith.extsi %1 : i32 to i64 loc(#loc6)
    %19 = arith.extsi %c64_i32_5 : i32 to i64 loc(#loc6)
    %20 = arith.muli %18, %19 : i64 loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_6 : i64 loc(#loc6)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_7 : i64 loc(#loc6)
    %23 = arith.andi %21, %22 : i1 loc(#loc6)
    %24 = arith.muli %1, %c64_i32_5 : i32 loc(#loc6)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc7)
    %26 = tt.splat %24 : i32 -> tensor<64xi32> loc(#loc8)
    %27 = arith.extsi %26 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %28 = arith.extsi %25 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %29 = arith.addi %27, %28 : tensor<64xi64> loc(#loc8)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc8)
    %cst_10 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc8)
    %30 = arith.cmpi sle, %29, %cst_10 : tensor<64xi64> loc(#loc8)
    %cst_11 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc8)
    %31 = arith.cmpi sge, %29, %cst_11 : tensor<64xi64> loc(#loc8)
    %32 = arith.andi %30, %31 : tensor<64xi1> loc(#loc8)
    %33 = arith.addi %26, %25 : tensor<64xi32> loc(#loc8)
    %34 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc10)
    %c32_i32 = arith.constant 32 : i32 loc(#loc10)
    %35 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc10)
    %36 = arith.bitcast %arg5 : i32 to i32 loc(#loc10)
    %37 = arith.bitcast %c32_i32 : i32 to i32 loc(#loc10)
    %38 = ub.poison : i32 loc(#loc10)
    %39 = scf.for %arg11 = %35 to %36 step %37 iter_args(%arg12 = %34) -> (tensor<64x64xf32>)  : i32 {
      %108 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %109 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %110 = arith.extsi %109 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %111 = arith.extsi %108 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %112 = arith.addi %110, %111 : tensor<32xi64> loc(#loc12)
      %c2147483647_i64_33 = arith.constant 2147483647 : i64 loc(#loc12)
      %c-2147483648_i64_34 = arith.constant -2147483648 : i64 loc(#loc12)
      %cst_35 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc12)
      %113 = arith.cmpi sle, %112, %cst_35 : tensor<32xi64> loc(#loc12)
      %cst_36 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc12)
      %114 = arith.cmpi sge, %112, %cst_36 : tensor<32xi64> loc(#loc12)
      %115 = arith.andi %113, %114 : tensor<32xi1> loc(#loc12)
      %116 = arith.addi %109, %108 : tensor<32xi32> loc(#loc12)
      %117 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %118 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %119 = arith.cmpi slt, %117, %118 : tensor<64x1xi32> loc(#loc14)
      %120 = tt.expand_dims %116 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %121 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %122 = arith.cmpi slt, %120, %121 : tensor<1x32xi32> loc(#loc16)
      %123 = tt.broadcast %119 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %124 = tt.broadcast %122 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %125 = arith.andi %123, %124 : tensor<64x32xi1> loc(#loc17)
      %126 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %127 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %128 = arith.extsi %126 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc19)
      %129 = arith.extsi %127 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc19)
      %130 = arith.muli %128, %129 : tensor<64x1xi64> loc(#loc19)
      %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc19)
      %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc19)
      %cst_39 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc19)
      %131 = arith.cmpi sle, %130, %cst_39 : tensor<64x1xi64> loc(#loc19)
      %cst_40 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc19)
      %132 = arith.cmpi sge, %130, %cst_40 : tensor<64x1xi64> loc(#loc19)
      %133 = arith.andi %131, %132 : tensor<64x1xi1> loc(#loc19)
      %134 = arith.muli %126, %127 : tensor<64x1xi32> loc(#loc19)
      %135 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %136 = tt.addptr %135, %134 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %137 = tt.expand_dims %116 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %c1_i32_41 = arith.constant 1 : i32 loc(#loc22)
      %c1_i32_42 = arith.constant 1 : i32 loc(#loc22)
      %cst_43 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc22)
      %138 = arith.extsi %137 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc22)
      %139 = arith.extsi %cst_43 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc22)
      %140 = arith.muli %138, %139 : tensor<1x32xi64> loc(#loc22)
      %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc22)
      %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc22)
      %cst_46 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc22)
      %141 = arith.cmpi sle, %140, %cst_46 : tensor<1x32xi64> loc(#loc22)
      %cst_47 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc22)
      %142 = arith.cmpi sge, %140, %cst_47 : tensor<1x32xi64> loc(#loc22)
      %143 = arith.andi %141, %142 : tensor<1x32xi1> loc(#loc22)
      %144 = arith.muli %137, %cst_43 : tensor<1x32xi32> loc(#loc22)
      %145 = tt.broadcast %136 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %146 = tt.broadcast %144 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc23)
      %147 = tt.addptr %145, %146 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc23)
      %148 = tt.load %147, %125 : tensor<64x32x!tt.ptr<f32>> loc(#loc24)
      %149 = tt.expand_dims %116 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc25)
      %150 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc26)
      %151 = arith.cmpi slt, %149, %150 : tensor<32x1xi32> loc(#loc26)
      %152 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc27)
      %153 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc28)
      %154 = arith.cmpi slt, %152, %153 : tensor<1x64xi32> loc(#loc28)
      %155 = tt.broadcast %151 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc29)
      %156 = tt.broadcast %154 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc29)
      %157 = arith.andi %155, %156 : tensor<32x64xi1> loc(#loc29)
      %158 = tt.expand_dims %116 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc30)
      %159 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc31)
      %160 = arith.extsi %158 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc31)
      %161 = arith.extsi %159 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc31)
      %162 = arith.muli %160, %161 : tensor<32x1xi64> loc(#loc31)
      %c2147483647_i64_48 = arith.constant 2147483647 : i64 loc(#loc31)
      %c-2147483648_i64_49 = arith.constant -2147483648 : i64 loc(#loc31)
      %cst_50 = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc31)
      %163 = arith.cmpi sle, %162, %cst_50 : tensor<32x1xi64> loc(#loc31)
      %cst_51 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc31)
      %164 = arith.cmpi sge, %162, %cst_51 : tensor<32x1xi64> loc(#loc31)
      %165 = arith.andi %163, %164 : tensor<32x1xi1> loc(#loc31)
      %166 = arith.muli %158, %159 : tensor<32x1xi32> loc(#loc31)
      %167 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc32)
      %168 = tt.addptr %167, %166 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc32)
      %169 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc33)
      %c1_i32_52 = arith.constant 1 : i32 loc(#loc34)
      %c1_i32_53 = arith.constant 1 : i32 loc(#loc34)
      %cst_54 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc34)
      %170 = arith.extsi %169 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc34)
      %171 = arith.extsi %cst_54 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc34)
      %172 = arith.muli %170, %171 : tensor<1x64xi64> loc(#loc34)
      %c2147483647_i64_55 = arith.constant 2147483647 : i64 loc(#loc34)
      %c-2147483648_i64_56 = arith.constant -2147483648 : i64 loc(#loc34)
      %cst_57 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc34)
      %173 = arith.cmpi sle, %172, %cst_57 : tensor<1x64xi64> loc(#loc34)
      %cst_58 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc34)
      %174 = arith.cmpi sge, %172, %cst_58 : tensor<1x64xi64> loc(#loc34)
      %175 = arith.andi %173, %174 : tensor<1x64xi1> loc(#loc34)
      %176 = arith.muli %169, %cst_54 : tensor<1x64xi32> loc(#loc34)
      %177 = tt.broadcast %168 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc35)
      %178 = tt.broadcast %176 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc35)
      %179 = tt.addptr %177, %178 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc35)
      %180 = tt.load %179, %157 : tensor<32x64x!tt.ptr<f32>> loc(#loc36)
      %cst_59 = arith.constant 0.000000e+00 : f32 loc(#loc37)
      %cst_60 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc37)
      %181 = tt.dot %148, %180, %cst_60 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc37)
      %182 = arith.addf %arg12, %181 : tensor<64x64xf32> loc(#loc38)
      scf.yield %182 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc10)
    %40 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %41 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc41)
    %42 = arith.cmpi slt, %40, %41 : tensor<64x1xi32> loc(#loc41)
    %43 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc42)
    %44 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc43)
    %45 = arith.cmpi slt, %43, %44 : tensor<1x64xi32> loc(#loc43)
    %46 = tt.broadcast %42 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc44)
    %47 = tt.broadcast %45 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc44)
    %48 = arith.andi %46, %47 : tensor<64x64xi1> loc(#loc44)
    %49 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %50 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc46)
    %51 = arith.extsi %49 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc46)
    %52 = arith.extsi %50 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc46)
    %53 = arith.muli %51, %52 : tensor<64x1xi64> loc(#loc46)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc46)
    %cst_14 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc46)
    %54 = arith.cmpi sle, %53, %cst_14 : tensor<64x1xi64> loc(#loc46)
    %cst_15 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc46)
    %55 = arith.cmpi sge, %53, %cst_15 : tensor<64x1xi64> loc(#loc46)
    %56 = arith.andi %54, %55 : tensor<64x1xi1> loc(#loc46)
    %57 = arith.muli %49, %50 : tensor<64x1xi32> loc(#loc46)
    %58 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc47)
    %59 = tt.addptr %58, %57 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc47)
    %60 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc48)
    %c1_i32 = arith.constant 1 : i32 loc(#loc49)
    %c1_i32_16 = arith.constant 1 : i32 loc(#loc49)
    %cst_17 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc49)
    %61 = arith.extsi %60 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc49)
    %62 = arith.extsi %cst_17 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc49)
    %63 = arith.muli %61, %62 : tensor<1x64xi64> loc(#loc49)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc49)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc49)
    %cst_20 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc49)
    %64 = arith.cmpi sle, %63, %cst_20 : tensor<1x64xi64> loc(#loc49)
    %cst_21 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc49)
    %65 = arith.cmpi sge, %63, %cst_21 : tensor<1x64xi64> loc(#loc49)
    %66 = arith.andi %64, %65 : tensor<1x64xi1> loc(#loc49)
    %67 = arith.muli %60, %cst_17 : tensor<1x64xi32> loc(#loc49)
    %68 = tt.broadcast %59 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    %69 = tt.broadcast %67 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc50)
    %70 = tt.addptr %68, %69 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc50)
    %71 = tt.load %70, %48 : tensor<64x64x!tt.ptr<f32>> loc(#loc51)
    %72 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc52)
    %73 = arith.mulf %72, %39 : tensor<64x64xf32> loc(#loc52)
    %74 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc53)
    %75 = arith.mulf %74, %71 : tensor<64x64xf32> loc(#loc53)
    %76 = arith.addf %73, %75 : tensor<64x64xf32> loc(#loc54)
    %77 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc55)
    %78 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc56)
    %79 = arith.cmpi slt, %77, %78 : tensor<64x1xi32> loc(#loc56)
    %80 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc57)
    %81 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc58)
    %82 = arith.cmpi slt, %80, %81 : tensor<1x64xi32> loc(#loc58)
    %83 = tt.broadcast %79 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc59)
    %84 = tt.broadcast %82 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc59)
    %85 = arith.andi %83, %84 : tensor<64x64xi1> loc(#loc59)
    %86 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc60)
    %87 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc61)
    %88 = arith.extsi %86 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %89 = arith.extsi %87 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %90 = arith.muli %88, %89 : tensor<64x1xi64> loc(#loc61)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc61)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc61)
    %cst_24 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc61)
    %91 = arith.cmpi sle, %90, %cst_24 : tensor<64x1xi64> loc(#loc61)
    %cst_25 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc61)
    %92 = arith.cmpi sge, %90, %cst_25 : tensor<64x1xi64> loc(#loc61)
    %93 = arith.andi %91, %92 : tensor<64x1xi1> loc(#loc61)
    %94 = arith.muli %86, %87 : tensor<64x1xi32> loc(#loc61)
    %95 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc62)
    %96 = tt.addptr %95, %94 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc62)
    %97 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc63)
    %c1_i32_26 = arith.constant 1 : i32 loc(#loc64)
    %c1_i32_27 = arith.constant 1 : i32 loc(#loc64)
    %cst_28 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc64)
    %98 = arith.extsi %97 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc64)
    %99 = arith.extsi %cst_28 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc64)
    %100 = arith.muli %98, %99 : tensor<1x64xi64> loc(#loc64)
    %c2147483647_i64_29 = arith.constant 2147483647 : i64 loc(#loc64)
    %c-2147483648_i64_30 = arith.constant -2147483648 : i64 loc(#loc64)
    %cst_31 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc64)
    %101 = arith.cmpi sle, %100, %cst_31 : tensor<1x64xi64> loc(#loc64)
    %cst_32 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc64)
    %102 = arith.cmpi sge, %100, %cst_32 : tensor<1x64xi64> loc(#loc64)
    %103 = arith.andi %101, %102 : tensor<1x64xi1> loc(#loc64)
    %104 = arith.muli %97, %cst_28 : tensor<1x64xi32> loc(#loc64)
    %105 = tt.broadcast %96 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc65)
    %106 = tt.broadcast %104 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc65)
    %107 = tt.addptr %105, %106 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc65)
    tt.store %107, %76, %85 : tensor<64x64x!tt.ptr<f32>> loc(#loc66)
    tt.return loc(#loc67)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc69)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc69)
    tt.return %cst_0 : tensor<64x64xf32> loc(#loc70)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x64xf32> loc(#loc71)
    tt.return %0 : tensor<64x64xf32> loc(#loc71)
  } loc(#loc68)
} loc(#loc)
#loc1 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":44:19)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:72)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:72)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:68)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc64 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:65)
#loc65 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc66 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc67 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)
#loc68 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":117:0)
#loc69 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:31)
#loc70 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:11)
#loc71 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.extsi %0 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc3)
    %4 = arith.muli %2, %3 : i64 loc(#loc3)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc3)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc3)
    %5 = arith.cmpi sle, %4, %c2147483647_i64 : i64 loc(#loc3)
    %6 = arith.cmpi sge, %4, %c-2147483648_i64 : i64 loc(#loc3)
    %7 = arith.andi %5, %6 : i1 loc(#loc3)
    %8 = arith.muli %0, %c64_i32_0 : i32 loc(#loc3)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %10 = tt.splat %8 : i32 -> tensor<64xi32> loc(#loc5)
    %11 = arith.extsi %10 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %12 = arith.extsi %9 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %13 = arith.addi %11, %12 : tensor<64xi64> loc(#loc5)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc5)
    %14 = arith.cmpi sle, %13, %cst : tensor<64xi64> loc(#loc5)
    %cst_3 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc5)
    %15 = arith.cmpi sge, %13, %cst_3 : tensor<64xi64> loc(#loc5)
    %16 = arith.andi %14, %15 : tensor<64xi1> loc(#loc5)
    %17 = arith.addi %10, %9 : tensor<64xi32> loc(#loc5)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc6)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc6)
    %18 = arith.extsi %1 : i32 to i64 loc(#loc6)
    %19 = arith.extsi %c64_i32_5 : i32 to i64 loc(#loc6)
    %20 = arith.muli %18, %19 : i64 loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_6 : i64 loc(#loc6)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_7 : i64 loc(#loc6)
    %23 = arith.andi %21, %22 : i1 loc(#loc6)
    %24 = arith.muli %1, %c64_i32_5 : i32 loc(#loc6)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc7)
    %26 = tt.splat %24 : i32 -> tensor<64xi32> loc(#loc8)
    %27 = arith.extsi %26 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %28 = arith.extsi %25 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %29 = arith.addi %27, %28 : tensor<64xi64> loc(#loc8)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc8)
    %cst_10 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc8)
    %30 = arith.cmpi sle, %29, %cst_10 : tensor<64xi64> loc(#loc8)
    %cst_11 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc8)
    %31 = arith.cmpi sge, %29, %cst_11 : tensor<64xi64> loc(#loc8)
    %32 = arith.andi %30, %31 : tensor<64xi1> loc(#loc8)
    %33 = arith.addi %26, %25 : tensor<64xi32> loc(#loc8)
    %34 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc10)
    %c32_i32 = arith.constant 32 : i32 loc(#loc10)
    %35 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc10)
    %36 = arith.bitcast %arg5 : i32 to i32 loc(#loc10)
    %37 = arith.bitcast %c32_i32 : i32 to i32 loc(#loc10)
    %38 = ub.poison : i32 loc(#loc10)
    %39 = scf.for %arg11 = %35 to %36 step %37 iter_args(%arg12 = %34) -> (tensor<64x64xf32>)  : i32 {
      %108 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %109 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %110 = arith.extsi %109 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %111 = arith.extsi %108 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %112 = arith.addi %110, %111 : tensor<32xi64> loc(#loc12)
      %c2147483647_i64_33 = arith.constant 2147483647 : i64 loc(#loc12)
      %c-2147483648_i64_34 = arith.constant -2147483648 : i64 loc(#loc12)
      %cst_35 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc12)
      %113 = arith.cmpi sle, %112, %cst_35 : tensor<32xi64> loc(#loc12)
      %cst_36 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc12)
      %114 = arith.cmpi sge, %112, %cst_36 : tensor<32xi64> loc(#loc12)
      %115 = arith.andi %113, %114 : tensor<32xi1> loc(#loc12)
      %116 = arith.addi %109, %108 : tensor<32xi32> loc(#loc12)
      %117 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %118 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %119 = arith.cmpi slt, %117, %118 : tensor<64x1xi32> loc(#loc14)
      %120 = tt.expand_dims %116 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %121 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %122 = arith.cmpi slt, %120, %121 : tensor<1x32xi32> loc(#loc16)
      %123 = tt.broadcast %119 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %124 = tt.broadcast %122 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %125 = arith.andi %123, %124 : tensor<64x32xi1> loc(#loc17)
      %126 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %127 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %128 = arith.extsi %126 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc19)
      %129 = arith.extsi %127 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc19)
      %130 = arith.muli %128, %129 : tensor<64x1xi64> loc(#loc19)
      %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc19)
      %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc19)
      %cst_39 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc19)
      %131 = arith.cmpi sle, %130, %cst_39 : tensor<64x1xi64> loc(#loc19)
      %cst_40 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc19)
      %132 = arith.cmpi sge, %130, %cst_40 : tensor<64x1xi64> loc(#loc19)
      %133 = arith.andi %131, %132 : tensor<64x1xi1> loc(#loc19)
      %134 = arith.muli %126, %127 : tensor<64x1xi32> loc(#loc19)
      %135 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %136 = tt.addptr %135, %134 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %137 = tt.expand_dims %116 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %c1_i32_41 = arith.constant 1 : i32 loc(#loc22)
      %c1_i32_42 = arith.constant 1 : i32 loc(#loc22)
      %cst_43 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc22)
      %138 = arith.extsi %137 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc22)
      %139 = arith.extsi %cst_43 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc22)
      %140 = arith.muli %138, %139 : tensor<1x32xi64> loc(#loc22)
      %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc22)
      %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc22)
      %cst_46 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc22)
      %141 = arith.cmpi sle, %140, %cst_46 : tensor<1x32xi64> loc(#loc22)
      %cst_47 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc22)
      %142 = arith.cmpi sge, %140, %cst_47 : tensor<1x32xi64> loc(#loc22)
      %143 = arith.andi %141, %142 : tensor<1x32xi1> loc(#loc22)
      %144 = arith.muli %137, %cst_43 : tensor<1x32xi32> loc(#loc22)
      %145 = tt.broadcast %136 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %146 = tt.broadcast %144 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc23)
      %147 = tt.addptr %145, %146 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc23)
      %148 = tt.load %147, %125 : tensor<64x32x!tt.ptr<f32>> loc(#loc24)
      %149 = tt.expand_dims %116 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc25)
      %150 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc26)
      %151 = arith.cmpi slt, %149, %150 : tensor<32x1xi32> loc(#loc26)
      %152 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc27)
      %153 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc28)
      %154 = arith.cmpi slt, %152, %153 : tensor<1x64xi32> loc(#loc28)
      %155 = tt.broadcast %151 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc29)
      %156 = tt.broadcast %154 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc29)
      %157 = arith.andi %155, %156 : tensor<32x64xi1> loc(#loc29)
      %158 = tt.expand_dims %116 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc30)
      %159 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc31)
      %160 = arith.extsi %158 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc31)
      %161 = arith.extsi %159 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc31)
      %162 = arith.muli %160, %161 : tensor<32x1xi64> loc(#loc31)
      %c2147483647_i64_48 = arith.constant 2147483647 : i64 loc(#loc31)
      %c-2147483648_i64_49 = arith.constant -2147483648 : i64 loc(#loc31)
      %cst_50 = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc31)
      %163 = arith.cmpi sle, %162, %cst_50 : tensor<32x1xi64> loc(#loc31)
      %cst_51 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc31)
      %164 = arith.cmpi sge, %162, %cst_51 : tensor<32x1xi64> loc(#loc31)
      %165 = arith.andi %163, %164 : tensor<32x1xi1> loc(#loc31)
      %166 = arith.muli %158, %159 : tensor<32x1xi32> loc(#loc31)
      %167 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc32)
      %168 = tt.addptr %167, %166 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc32)
      %169 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc33)
      %c1_i32_52 = arith.constant 1 : i32 loc(#loc34)
      %c1_i32_53 = arith.constant 1 : i32 loc(#loc34)
      %cst_54 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc34)
      %170 = arith.extsi %169 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc34)
      %171 = arith.extsi %cst_54 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc34)
      %172 = arith.muli %170, %171 : tensor<1x64xi64> loc(#loc34)
      %c2147483647_i64_55 = arith.constant 2147483647 : i64 loc(#loc34)
      %c-2147483648_i64_56 = arith.constant -2147483648 : i64 loc(#loc34)
      %cst_57 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc34)
      %173 = arith.cmpi sle, %172, %cst_57 : tensor<1x64xi64> loc(#loc34)
      %cst_58 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc34)
      %174 = arith.cmpi sge, %172, %cst_58 : tensor<1x64xi64> loc(#loc34)
      %175 = arith.andi %173, %174 : tensor<1x64xi1> loc(#loc34)
      %176 = arith.muli %169, %cst_54 : tensor<1x64xi32> loc(#loc34)
      %177 = tt.broadcast %168 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc35)
      %178 = tt.broadcast %176 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc35)
      %179 = tt.addptr %177, %178 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc35)
      %180 = tt.load %179, %157 : tensor<32x64x!tt.ptr<f32>> loc(#loc36)
      %cst_59 = arith.constant 0.000000e+00 : f32 loc(#loc37)
      %cst_60 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc37)
      %181 = tt.dot %148, %180, %cst_60 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc37)
      %182 = arith.addf %arg12, %181 : tensor<64x64xf32> loc(#loc38)
      scf.yield %182 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc10)
    %40 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %41 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc41)
    %42 = arith.cmpi slt, %40, %41 : tensor<64x1xi32> loc(#loc41)
    %43 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc42)
    %44 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc43)
    %45 = arith.cmpi slt, %43, %44 : tensor<1x64xi32> loc(#loc43)
    %46 = tt.broadcast %42 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc44)
    %47 = tt.broadcast %45 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc44)
    %48 = arith.andi %46, %47 : tensor<64x64xi1> loc(#loc44)
    %49 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %50 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc46)
    %51 = arith.extsi %49 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc46)
    %52 = arith.extsi %50 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc46)
    %53 = arith.muli %51, %52 : tensor<64x1xi64> loc(#loc46)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc46)
    %cst_14 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc46)
    %54 = arith.cmpi sle, %53, %cst_14 : tensor<64x1xi64> loc(#loc46)
    %cst_15 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc46)
    %55 = arith.cmpi sge, %53, %cst_15 : tensor<64x1xi64> loc(#loc46)
    %56 = arith.andi %54, %55 : tensor<64x1xi1> loc(#loc46)
    %57 = arith.muli %49, %50 : tensor<64x1xi32> loc(#loc46)
    %58 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc47)
    %59 = tt.addptr %58, %57 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc47)
    %60 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc48)
    %c1_i32 = arith.constant 1 : i32 loc(#loc49)
    %c1_i32_16 = arith.constant 1 : i32 loc(#loc49)
    %cst_17 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc49)
    %61 = arith.extsi %60 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc49)
    %62 = arith.extsi %cst_17 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc49)
    %63 = arith.muli %61, %62 : tensor<1x64xi64> loc(#loc49)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc49)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc49)
    %cst_20 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc49)
    %64 = arith.cmpi sle, %63, %cst_20 : tensor<1x64xi64> loc(#loc49)
    %cst_21 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc49)
    %65 = arith.cmpi sge, %63, %cst_21 : tensor<1x64xi64> loc(#loc49)
    %66 = arith.andi %64, %65 : tensor<1x64xi1> loc(#loc49)
    %67 = arith.muli %60, %cst_17 : tensor<1x64xi32> loc(#loc49)
    %68 = tt.broadcast %59 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    %69 = tt.broadcast %67 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc50)
    %70 = tt.addptr %68, %69 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc50)
    %71 = tt.load %70, %48 : tensor<64x64x!tt.ptr<f32>> loc(#loc51)
    %72 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc52)
    %73 = arith.mulf %72, %39 : tensor<64x64xf32> loc(#loc52)
    %74 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc53)
    %75 = arith.mulf %74, %71 : tensor<64x64xf32> loc(#loc53)
    %76 = arith.addf %73, %75 : tensor<64x64xf32> loc(#loc54)
    %77 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc55)
    %78 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc56)
    %79 = arith.cmpi slt, %77, %78 : tensor<64x1xi32> loc(#loc56)
    %80 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc57)
    %81 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc58)
    %82 = arith.cmpi slt, %80, %81 : tensor<1x64xi32> loc(#loc58)
    %83 = tt.broadcast %79 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc59)
    %84 = tt.broadcast %82 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc59)
    %85 = arith.andi %83, %84 : tensor<64x64xi1> loc(#loc59)
    %86 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc60)
    %87 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc61)
    %88 = arith.extsi %86 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %89 = arith.extsi %87 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %90 = arith.muli %88, %89 : tensor<64x1xi64> loc(#loc61)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc61)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc61)
    %cst_24 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc61)
    %91 = arith.cmpi sle, %90, %cst_24 : tensor<64x1xi64> loc(#loc61)
    %cst_25 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc61)
    %92 = arith.cmpi sge, %90, %cst_25 : tensor<64x1xi64> loc(#loc61)
    %93 = arith.andi %91, %92 : tensor<64x1xi1> loc(#loc61)
    %94 = arith.muli %86, %87 : tensor<64x1xi32> loc(#loc61)
    %95 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc62)
    %96 = tt.addptr %95, %94 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc62)
    %97 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc63)
    %c1_i32_26 = arith.constant 1 : i32 loc(#loc64)
    %c1_i32_27 = arith.constant 1 : i32 loc(#loc64)
    %cst_28 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc64)
    %98 = arith.extsi %97 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc64)
    %99 = arith.extsi %cst_28 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc64)
    %100 = arith.muli %98, %99 : tensor<1x64xi64> loc(#loc64)
    %c2147483647_i64_29 = arith.constant 2147483647 : i64 loc(#loc64)
    %c-2147483648_i64_30 = arith.constant -2147483648 : i64 loc(#loc64)
    %cst_31 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc64)
    %101 = arith.cmpi sle, %100, %cst_31 : tensor<1x64xi64> loc(#loc64)
    %cst_32 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc64)
    %102 = arith.cmpi sge, %100, %cst_32 : tensor<1x64xi64> loc(#loc64)
    %103 = arith.andi %101, %102 : tensor<1x64xi1> loc(#loc64)
    %104 = arith.muli %97, %cst_28 : tensor<1x64xi32> loc(#loc64)
    %105 = tt.broadcast %96 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc65)
    %106 = tt.broadcast %104 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc65)
    %107 = tt.addptr %105, %106 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc65)
    tt.store %107, %76, %85 : tensor<64x64x!tt.ptr<f32>> loc(#loc66)
    tt.return loc(#loc67)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc69)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc69)
    tt.return %cst_0 : tensor<64x64xf32> loc(#loc70)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x64xf32> loc(#loc71)
    tt.return %0 : tensor<64x64xf32> loc(#loc71)
  } loc(#loc68)
} loc(#loc)
#loc1 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":44:19)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:72)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:72)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:68)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc64 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:65)
#loc65 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc66 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc67 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)
#loc68 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":117:0)
#loc69 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:31)
#loc70 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:11)
#loc71 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @gemm_kernel) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.extsi %0 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc3)
    %4 = arith.muli %2, %3 : i64 loc(#loc3)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc3)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc3)
    %5 = arith.cmpi sle, %4, %c2147483647_i64 : i64 loc(#loc3)
    %6 = arith.cmpi sge, %4, %c-2147483648_i64 : i64 loc(#loc3)
    %7 = arith.andi %5, %6 : i1 loc(#loc3)
    %8 = arith.muli %0, %c64_i32_0 : i32 loc(#loc3)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %10 = tt.splat %8 : i32 -> tensor<64xi32> loc(#loc5)
    %11 = arith.extsi %10 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %12 = arith.extsi %9 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %13 = arith.addi %11, %12 : tensor<64xi64> loc(#loc5)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc5)
    %14 = arith.cmpi sle, %13, %cst : tensor<64xi64> loc(#loc5)
    %cst_3 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc5)
    %15 = arith.cmpi sge, %13, %cst_3 : tensor<64xi64> loc(#loc5)
    %16 = arith.andi %14, %15 : tensor<64xi1> loc(#loc5)
    %17 = arith.addi %10, %9 : tensor<64xi32> loc(#loc5)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc6)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc6)
    %18 = arith.extsi %1 : i32 to i64 loc(#loc6)
    %19 = arith.extsi %c64_i32_5 : i32 to i64 loc(#loc6)
    %20 = arith.muli %18, %19 : i64 loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_6 : i64 loc(#loc6)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_7 : i64 loc(#loc6)
    %23 = arith.andi %21, %22 : i1 loc(#loc6)
    %24 = arith.muli %1, %c64_i32_5 : i32 loc(#loc6)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc7)
    %26 = tt.splat %24 : i32 -> tensor<64xi32> loc(#loc8)
    %27 = arith.extsi %26 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %28 = arith.extsi %25 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %29 = arith.addi %27, %28 : tensor<64xi64> loc(#loc8)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc8)
    %cst_10 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc8)
    %30 = arith.cmpi sle, %29, %cst_10 : tensor<64xi64> loc(#loc8)
    %cst_11 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc8)
    %31 = arith.cmpi sge, %29, %cst_11 : tensor<64xi64> loc(#loc8)
    %32 = arith.andi %30, %31 : tensor<64xi1> loc(#loc8)
    %33 = arith.addi %26, %25 : tensor<64xi32> loc(#loc8)
    %34 = tt.call @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc10)
    %c32_i32 = arith.constant 32 : i32 loc(#loc10)
    %35 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc10)
    %36 = arith.bitcast %arg5 : i32 to i32 loc(#loc10)
    %37 = arith.bitcast %c32_i32 : i32 to i32 loc(#loc10)
    %38 = ub.poison : i32 loc(#loc10)
    %39 = scf.for %arg11 = %35 to %36 step %37 iter_args(%arg12 = %34) -> (tensor<64x64xf32>)  : i32 {
      %108 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %109 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %110 = arith.extsi %109 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %111 = arith.extsi %108 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %112 = arith.addi %110, %111 : tensor<32xi64> loc(#loc12)
      %c2147483647_i64_33 = arith.constant 2147483647 : i64 loc(#loc12)
      %c-2147483648_i64_34 = arith.constant -2147483648 : i64 loc(#loc12)
      %cst_35 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc12)
      %113 = arith.cmpi sle, %112, %cst_35 : tensor<32xi64> loc(#loc12)
      %cst_36 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc12)
      %114 = arith.cmpi sge, %112, %cst_36 : tensor<32xi64> loc(#loc12)
      %115 = arith.andi %113, %114 : tensor<32xi1> loc(#loc12)
      %116 = arith.addi %109, %108 : tensor<32xi32> loc(#loc12)
      %117 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %118 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %119 = arith.cmpi slt, %117, %118 : tensor<64x1xi32> loc(#loc14)
      %120 = tt.expand_dims %116 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %121 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %122 = arith.cmpi slt, %120, %121 : tensor<1x32xi32> loc(#loc16)
      %123 = tt.broadcast %119 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %124 = tt.broadcast %122 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %125 = arith.andi %123, %124 : tensor<64x32xi1> loc(#loc17)
      %126 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %127 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %128 = arith.extsi %126 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc19)
      %129 = arith.extsi %127 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc19)
      %130 = arith.muli %128, %129 : tensor<64x1xi64> loc(#loc19)
      %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc19)
      %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc19)
      %cst_39 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc19)
      %131 = arith.cmpi sle, %130, %cst_39 : tensor<64x1xi64> loc(#loc19)
      %cst_40 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc19)
      %132 = arith.cmpi sge, %130, %cst_40 : tensor<64x1xi64> loc(#loc19)
      %133 = arith.andi %131, %132 : tensor<64x1xi1> loc(#loc19)
      %134 = arith.muli %126, %127 : tensor<64x1xi32> loc(#loc19)
      %135 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %136 = tt.addptr %135, %134 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %137 = tt.expand_dims %116 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %c1_i32_41 = arith.constant 1 : i32 loc(#loc22)
      %c1_i32_42 = arith.constant 1 : i32 loc(#loc22)
      %cst_43 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc22)
      %138 = arith.extsi %137 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc22)
      %139 = arith.extsi %cst_43 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc22)
      %140 = arith.muli %138, %139 : tensor<1x32xi64> loc(#loc22)
      %c2147483647_i64_44 = arith.constant 2147483647 : i64 loc(#loc22)
      %c-2147483648_i64_45 = arith.constant -2147483648 : i64 loc(#loc22)
      %cst_46 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc22)
      %141 = arith.cmpi sle, %140, %cst_46 : tensor<1x32xi64> loc(#loc22)
      %cst_47 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc22)
      %142 = arith.cmpi sge, %140, %cst_47 : tensor<1x32xi64> loc(#loc22)
      %143 = arith.andi %141, %142 : tensor<1x32xi1> loc(#loc22)
      %144 = arith.muli %137, %cst_43 : tensor<1x32xi32> loc(#loc22)
      %145 = tt.broadcast %136 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %146 = tt.broadcast %144 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc23)
      %147 = tt.addptr %145, %146 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc23)
      %148 = tt.load %147, %125 : tensor<64x32x!tt.ptr<f32>> loc(#loc24)
      %149 = tt.expand_dims %116 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc25)
      %150 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc26)
      %151 = arith.cmpi slt, %149, %150 : tensor<32x1xi32> loc(#loc26)
      %152 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc27)
      %153 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc28)
      %154 = arith.cmpi slt, %152, %153 : tensor<1x64xi32> loc(#loc28)
      %155 = tt.broadcast %151 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc29)
      %156 = tt.broadcast %154 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc29)
      %157 = arith.andi %155, %156 : tensor<32x64xi1> loc(#loc29)
      %158 = tt.expand_dims %116 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc30)
      %159 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc31)
      %160 = arith.extsi %158 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc31)
      %161 = arith.extsi %159 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc31)
      %162 = arith.muli %160, %161 : tensor<32x1xi64> loc(#loc31)
      %c2147483647_i64_48 = arith.constant 2147483647 : i64 loc(#loc31)
      %c-2147483648_i64_49 = arith.constant -2147483648 : i64 loc(#loc31)
      %cst_50 = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc31)
      %163 = arith.cmpi sle, %162, %cst_50 : tensor<32x1xi64> loc(#loc31)
      %cst_51 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc31)
      %164 = arith.cmpi sge, %162, %cst_51 : tensor<32x1xi64> loc(#loc31)
      %165 = arith.andi %163, %164 : tensor<32x1xi1> loc(#loc31)
      %166 = arith.muli %158, %159 : tensor<32x1xi32> loc(#loc31)
      %167 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc32)
      %168 = tt.addptr %167, %166 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc32)
      %169 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc33)
      %c1_i32_52 = arith.constant 1 : i32 loc(#loc34)
      %c1_i32_53 = arith.constant 1 : i32 loc(#loc34)
      %cst_54 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc34)
      %170 = arith.extsi %169 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc34)
      %171 = arith.extsi %cst_54 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc34)
      %172 = arith.muli %170, %171 : tensor<1x64xi64> loc(#loc34)
      %c2147483647_i64_55 = arith.constant 2147483647 : i64 loc(#loc34)
      %c-2147483648_i64_56 = arith.constant -2147483648 : i64 loc(#loc34)
      %cst_57 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc34)
      %173 = arith.cmpi sle, %172, %cst_57 : tensor<1x64xi64> loc(#loc34)
      %cst_58 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc34)
      %174 = arith.cmpi sge, %172, %cst_58 : tensor<1x64xi64> loc(#loc34)
      %175 = arith.andi %173, %174 : tensor<1x64xi1> loc(#loc34)
      %176 = arith.muli %169, %cst_54 : tensor<1x64xi32> loc(#loc34)
      %177 = tt.broadcast %168 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc35)
      %178 = tt.broadcast %176 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc35)
      %179 = tt.addptr %177, %178 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc35)
      %180 = tt.load %179, %157 : tensor<32x64x!tt.ptr<f32>> loc(#loc36)
      %cst_59 = arith.constant 0.000000e+00 : f32 loc(#loc37)
      %cst_60 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc37)
      %181 = tt.dot %148, %180, %cst_60 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc37)
      %182 = arith.addf %arg12, %181 : tensor<64x64xf32> loc(#loc38)
      scf.yield %182 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc10)
    %40 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %41 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc41)
    %42 = arith.cmpi slt, %40, %41 : tensor<64x1xi32> loc(#loc41)
    %43 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc42)
    %44 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc43)
    %45 = arith.cmpi slt, %43, %44 : tensor<1x64xi32> loc(#loc43)
    %46 = tt.broadcast %42 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc44)
    %47 = tt.broadcast %45 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc44)
    %48 = arith.andi %46, %47 : tensor<64x64xi1> loc(#loc44)
    %49 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %50 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc46)
    %51 = arith.extsi %49 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc46)
    %52 = arith.extsi %50 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc46)
    %53 = arith.muli %51, %52 : tensor<64x1xi64> loc(#loc46)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc46)
    %cst_14 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc46)
    %54 = arith.cmpi sle, %53, %cst_14 : tensor<64x1xi64> loc(#loc46)
    %cst_15 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc46)
    %55 = arith.cmpi sge, %53, %cst_15 : tensor<64x1xi64> loc(#loc46)
    %56 = arith.andi %54, %55 : tensor<64x1xi1> loc(#loc46)
    %57 = arith.muli %49, %50 : tensor<64x1xi32> loc(#loc46)
    %58 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc47)
    %59 = tt.addptr %58, %57 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc47)
    %60 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc48)
    %c1_i32 = arith.constant 1 : i32 loc(#loc49)
    %c1_i32_16 = arith.constant 1 : i32 loc(#loc49)
    %cst_17 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc49)
    %61 = arith.extsi %60 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc49)
    %62 = arith.extsi %cst_17 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc49)
    %63 = arith.muli %61, %62 : tensor<1x64xi64> loc(#loc49)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc49)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc49)
    %cst_20 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc49)
    %64 = arith.cmpi sle, %63, %cst_20 : tensor<1x64xi64> loc(#loc49)
    %cst_21 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc49)
    %65 = arith.cmpi sge, %63, %cst_21 : tensor<1x64xi64> loc(#loc49)
    %66 = arith.andi %64, %65 : tensor<1x64xi1> loc(#loc49)
    %67 = arith.muli %60, %cst_17 : tensor<1x64xi32> loc(#loc49)
    %68 = tt.broadcast %59 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    %69 = tt.broadcast %67 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc50)
    %70 = tt.addptr %68, %69 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc50)
    %71 = tt.load %70, %48 : tensor<64x64x!tt.ptr<f32>> loc(#loc51)
    %72 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc52)
    %73 = arith.mulf %72, %39 : tensor<64x64xf32> loc(#loc52)
    %74 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc53)
    %75 = arith.mulf %74, %71 : tensor<64x64xf32> loc(#loc53)
    %76 = arith.addf %73, %75 : tensor<64x64xf32> loc(#loc54)
    %77 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc55)
    %78 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc56)
    %79 = arith.cmpi slt, %77, %78 : tensor<64x1xi32> loc(#loc56)
    %80 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc57)
    %81 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc58)
    %82 = arith.cmpi slt, %80, %81 : tensor<1x64xi32> loc(#loc58)
    %83 = tt.broadcast %79 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc59)
    %84 = tt.broadcast %82 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc59)
    %85 = arith.andi %83, %84 : tensor<64x64xi1> loc(#loc59)
    %86 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc60)
    %87 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc61)
    %88 = arith.extsi %86 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %89 = arith.extsi %87 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc61)
    %90 = arith.muli %88, %89 : tensor<64x1xi64> loc(#loc61)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc61)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc61)
    %cst_24 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc61)
    %91 = arith.cmpi sle, %90, %cst_24 : tensor<64x1xi64> loc(#loc61)
    %cst_25 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc61)
    %92 = arith.cmpi sge, %90, %cst_25 : tensor<64x1xi64> loc(#loc61)
    %93 = arith.andi %91, %92 : tensor<64x1xi1> loc(#loc61)
    %94 = arith.muli %86, %87 : tensor<64x1xi32> loc(#loc61)
    %95 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc62)
    %96 = tt.addptr %95, %94 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc62)
    %97 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc63)
    %c1_i32_26 = arith.constant 1 : i32 loc(#loc64)
    %c1_i32_27 = arith.constant 1 : i32 loc(#loc64)
    %cst_28 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc64)
    %98 = arith.extsi %97 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc64)
    %99 = arith.extsi %cst_28 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc64)
    %100 = arith.muli %98, %99 : tensor<1x64xi64> loc(#loc64)
    %c2147483647_i64_29 = arith.constant 2147483647 : i64 loc(#loc64)
    %c-2147483648_i64_30 = arith.constant -2147483648 : i64 loc(#loc64)
    %cst_31 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc64)
    %101 = arith.cmpi sle, %100, %cst_31 : tensor<1x64xi64> loc(#loc64)
    %cst_32 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc64)
    %102 = arith.cmpi sge, %100, %cst_32 : tensor<1x64xi64> loc(#loc64)
    %103 = arith.andi %101, %102 : tensor<1x64xi1> loc(#loc64)
    %104 = arith.muli %97, %cst_28 : tensor<1x64xi32> loc(#loc64)
    %105 = tt.broadcast %96 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc65)
    %106 = tt.broadcast %104 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc65)
    %107 = tt.addptr %105, %106 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc65)
    tt.store %107, %76, %85 : tensor<64x64x!tt.ptr<f32>> loc(#loc66)
    tt.return loc(#loc67)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc69)
    tt.return %cst : tensor<64x64xf32> loc(#loc70)
  } loc(#loc68)
} loc(#loc)
#loc1 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":44:19)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:72)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:72)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:68)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc64 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:65)
#loc65 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc66 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc67 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)
#loc68 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":117:0)
#loc69 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:31)
#loc70 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @gemm_kernel) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc67)
    %10 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %53 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc13)
      %54 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc14)
      %55 = arith.addi %54, %53 : tensor<32xi32> loc(#loc14)
      %56 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc15)
      %57 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc16)
      %58 = arith.cmpi slt, %56, %57 : tensor<64x1xi32> loc(#loc16)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc17)
      %60 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc18)
      %61 = arith.cmpi slt, %59, %60 : tensor<1x32xi32> loc(#loc18)
      %62 = tt.broadcast %58 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc19)
      %63 = tt.broadcast %61 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc19)
      %64 = arith.andi %62, %63 : tensor<64x32xi1> loc(#loc19)
      %65 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
      %66 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc21)
      %67 = arith.muli %65, %66 : tensor<64x1xi32> loc(#loc21)
      %68 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc22)
      %69 = tt.addptr %68, %67 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc22)
      %70 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc23)
      %71 = tt.broadcast %69 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc24)
      %72 = tt.broadcast %70 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc24)
      %73 = tt.addptr %71, %72 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc24)
      %74 = tt.load %73, %64 : tensor<64x32x!tt.ptr<f32>> loc(#loc25)
      %75 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc26)
      %76 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc27)
      %77 = arith.cmpi slt, %75, %76 : tensor<32x1xi32> loc(#loc27)
      %78 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc28)
      %79 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc29)
      %80 = arith.cmpi slt, %78, %79 : tensor<1x64xi32> loc(#loc29)
      %81 = tt.broadcast %77 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc30)
      %82 = tt.broadcast %80 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc30)
      %83 = arith.andi %81, %82 : tensor<32x64xi1> loc(#loc30)
      %84 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc31)
      %85 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc32)
      %86 = arith.muli %84, %85 : tensor<32x1xi32> loc(#loc32)
      %87 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc33)
      %88 = tt.addptr %87, %86 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc33)
      %89 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc34)
      %90 = tt.broadcast %88 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc35)
      %91 = tt.broadcast %89 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc35)
      %92 = tt.addptr %90, %91 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc35)
      %93 = tt.load %92, %83 : tensor<32x64x!tt.ptr<f32>> loc(#loc36)
      %94 = tt.dot %74, %93, %cst : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc37)
      %95 = arith.addf %arg12, %94 : tensor<64x64xf32> loc(#loc38)
      scf.yield %95 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc12)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %12 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc41)
    %13 = arith.cmpi slt, %11, %12 : tensor<64x1xi32> loc(#loc41)
    %14 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc42)
    %15 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc43)
    %16 = arith.cmpi slt, %14, %15 : tensor<1x64xi32> loc(#loc43)
    %17 = tt.broadcast %13 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc44)
    %18 = tt.broadcast %16 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc44)
    %19 = arith.andi %17, %18 : tensor<64x64xi1> loc(#loc44)
    %20 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %21 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc46)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc46)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc47)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc47)
    %25 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc48)
    %26 = tt.broadcast %24 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc49)
    %27 = tt.broadcast %25 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc49)
    %28 = tt.addptr %26, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc49)
    %29 = tt.load %28, %19 : tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    %30 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc51)
    %31 = arith.mulf %30, %10 : tensor<64x64xf32> loc(#loc51)
    %32 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc52)
    %33 = arith.mulf %32, %29 : tensor<64x64xf32> loc(#loc52)
    %34 = arith.addf %31, %33 : tensor<64x64xf32> loc(#loc53)
    %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc54)
    %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc55)
    %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc55)
    %38 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc56)
    %39 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc57)
    %40 = arith.cmpi slt, %38, %39 : tensor<1x64xi32> loc(#loc57)
    %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc58)
    %42 = tt.broadcast %40 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc58)
    %43 = arith.andi %41, %42 : tensor<64x64xi1> loc(#loc58)
    %44 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc59)
    %45 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc60)
    %46 = arith.muli %44, %45 : tensor<64x1xi32> loc(#loc60)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc61)
    %48 = tt.addptr %47, %46 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc61)
    %49 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc62)
    %50 = tt.broadcast %48 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc63)
    %51 = tt.broadcast %49 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc63)
    %52 = tt.addptr %50, %51 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc63)
    tt.store %52, %34, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc64)
    tt.return loc(#loc65)
  } loc(#loc)
  tt.func private @"triton.language.standard.zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} loc(#loc66)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc10 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":126:31)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":44:19)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc64 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc65 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)
#loc66 = loc("/home/along/triton_shared/triton/python/triton/language/standard.py":117:0)
#loc67 = loc(callsite(#loc10 at #loc11))


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %53 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %54 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %55 = arith.addi %54, %53 : tensor<32xi32> loc(#loc12)
      %56 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %57 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %58 = arith.cmpi slt, %56, %57 : tensor<64x1xi32> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %60 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %61 = arith.cmpi slt, %59, %60 : tensor<1x32xi32> loc(#loc16)
      %62 = tt.broadcast %58 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %63 = tt.broadcast %61 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %64 = arith.andi %62, %63 : tensor<64x32xi1> loc(#loc17)
      %65 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %66 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %67 = arith.muli %65, %66 : tensor<64x1xi32> loc(#loc19)
      %68 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %69 = tt.addptr %68, %67 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %70 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %71 = tt.broadcast %69 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc22)
      %72 = tt.broadcast %70 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc22)
      %73 = tt.addptr %71, %72 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc22)
      %74 = tt.load %73, %64 : tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %75 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc24)
      %76 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc25)
      %77 = arith.cmpi slt, %75, %76 : tensor<32x1xi32> loc(#loc25)
      %78 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc26)
      %79 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc27)
      %80 = arith.cmpi slt, %78, %79 : tensor<1x64xi32> loc(#loc27)
      %81 = tt.broadcast %77 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc28)
      %82 = tt.broadcast %80 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc28)
      %83 = arith.andi %81, %82 : tensor<32x64xi1> loc(#loc28)
      %84 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc29)
      %85 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc30)
      %86 = arith.muli %84, %85 : tensor<32x1xi32> loc(#loc30)
      %87 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc31)
      %88 = tt.addptr %87, %86 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc31)
      %89 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc32)
      %90 = tt.broadcast %88 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc33)
      %91 = tt.broadcast %89 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc33)
      %92 = tt.addptr %90, %91 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc33)
      %93 = tt.load %92, %83 : tensor<32x64x!tt.ptr<f32>> loc(#loc34)
      %94 = tt.dot %74, %93, %cst : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc35)
      %95 = arith.addf %arg12, %94 : tensor<64x64xf32> loc(#loc36)
      scf.yield %95 : tensor<64x64xf32> loc(#loc37)
    } loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc38)
    %12 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc39)
    %13 = arith.cmpi slt, %11, %12 : tensor<64x1xi32> loc(#loc39)
    %14 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc40)
    %15 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc41)
    %16 = arith.cmpi slt, %14, %15 : tensor<1x64xi32> loc(#loc41)
    %17 = tt.broadcast %13 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc42)
    %18 = tt.broadcast %16 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc42)
    %19 = arith.andi %17, %18 : tensor<64x64xi1> loc(#loc42)
    %20 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc43)
    %21 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc44)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc44)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc45)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc45)
    %25 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc46)
    %26 = tt.broadcast %24 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %27 = tt.broadcast %25 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc47)
    %28 = tt.addptr %26, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc47)
    %29 = tt.load %28, %19 : tensor<64x64x!tt.ptr<f32>> loc(#loc48)
    %30 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc49)
    %31 = arith.mulf %30, %10 : tensor<64x64xf32> loc(#loc49)
    %32 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc50)
    %33 = arith.mulf %32, %29 : tensor<64x64xf32> loc(#loc50)
    %34 = arith.addf %31, %33 : tensor<64x64xf32> loc(#loc51)
    %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc52)
    %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc53)
    %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc53)
    %38 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc54)
    %39 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc55)
    %40 = arith.cmpi slt, %38, %39 : tensor<1x64xi32> loc(#loc55)
    %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc56)
    %42 = tt.broadcast %40 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc56)
    %43 = arith.andi %41, %42 : tensor<64x64xi1> loc(#loc56)
    %44 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc57)
    %45 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc58)
    %46 = arith.muli %44, %45 : tensor<64x1xi32> loc(#loc58)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc59)
    %48 = tt.addptr %47, %46 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc59)
    %49 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc60)
    %50 = tt.broadcast %48 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc61)
    %51 = tt.broadcast %49 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc61)
    %52 = tt.addptr %50, %51 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc61)
    tt.store %52, %34, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %53 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %54 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %55 = arith.addi %54, %53 : tensor<32xi32> loc(#loc12)
      %56 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %57 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %58 = arith.cmpi slt, %56, %57 : tensor<64x1xi32> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %60 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %61 = arith.cmpi slt, %59, %60 : tensor<1x32xi32> loc(#loc16)
      %62 = tt.broadcast %58 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %63 = tt.broadcast %61 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %64 = arith.andi %62, %63 : tensor<64x32xi1> loc(#loc17)
      %65 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %66 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %67 = arith.muli %65, %66 : tensor<64x1xi32> loc(#loc19)
      %68 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %69 = tt.addptr %68, %67 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %70 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %71 = tt.broadcast %69 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc22)
      %72 = tt.broadcast %70 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc22)
      %73 = tt.addptr %71, %72 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc22)
      %74 = tt.load %73, %64 : tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %75 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc24)
      %76 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc25)
      %77 = arith.cmpi slt, %75, %76 : tensor<32x1xi32> loc(#loc25)
      %78 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc26)
      %79 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc27)
      %80 = arith.cmpi slt, %78, %79 : tensor<1x64xi32> loc(#loc27)
      %81 = tt.broadcast %77 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc28)
      %82 = tt.broadcast %80 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc28)
      %83 = arith.andi %81, %82 : tensor<32x64xi1> loc(#loc28)
      %84 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc29)
      %85 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc30)
      %86 = arith.muli %84, %85 : tensor<32x1xi32> loc(#loc30)
      %87 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc31)
      %88 = tt.addptr %87, %86 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc31)
      %89 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc32)
      %90 = tt.broadcast %88 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc33)
      %91 = tt.broadcast %89 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc33)
      %92 = tt.addptr %90, %91 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc33)
      %93 = tt.load %92, %83 : tensor<32x64x!tt.ptr<f32>> loc(#loc34)
      %94 = tt.dot %74, %93, %cst : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc35)
      %95 = arith.addf %arg12, %94 : tensor<64x64xf32> loc(#loc36)
      scf.yield %95 : tensor<64x64xf32> loc(#loc37)
    } loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc38)
    %12 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc39)
    %13 = arith.cmpi slt, %11, %12 : tensor<64x1xi32> loc(#loc39)
    %14 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc40)
    %15 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc41)
    %16 = arith.cmpi slt, %14, %15 : tensor<1x64xi32> loc(#loc41)
    %17 = tt.broadcast %13 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc42)
    %18 = tt.broadcast %16 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc42)
    %19 = arith.andi %17, %18 : tensor<64x64xi1> loc(#loc42)
    %20 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc43)
    %21 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc44)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc44)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc45)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc45)
    %25 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc46)
    %26 = tt.broadcast %24 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %27 = tt.broadcast %25 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc47)
    %28 = tt.addptr %26, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc47)
    %29 = tt.load %28, %19 : tensor<64x64x!tt.ptr<f32>> loc(#loc48)
    %30 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc49)
    %31 = arith.mulf %30, %10 : tensor<64x64xf32> loc(#loc49)
    %32 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc50)
    %33 = arith.mulf %32, %29 : tensor<64x64xf32> loc(#loc50)
    %34 = arith.addf %31, %33 : tensor<64x64xf32> loc(#loc51)
    %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc52)
    %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc53)
    %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc53)
    %38 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc54)
    %39 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc55)
    %40 = arith.cmpi slt, %38, %39 : tensor<1x64xi32> loc(#loc55)
    %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc56)
    %42 = tt.broadcast %40 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc56)
    %43 = arith.andi %41, %42 : tensor<64x64xi1> loc(#loc56)
    %44 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc57)
    %45 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc58)
    %46 = arith.muli %44, %45 : tensor<64x1xi32> loc(#loc58)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc59)
    %48 = tt.addptr %47, %46 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc59)
    %49 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc60)
    %50 = tt.broadcast %48 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc61)
    %51 = tt.broadcast %49 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc61)
    %52 = tt.addptr %50, %51 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc61)
    tt.store %52, %34, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %53 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %54 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %55 = arith.addi %54, %53 : tensor<32xi32> loc(#loc12)
      %56 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %57 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %58 = arith.cmpi slt, %56, %57 : tensor<64x1xi32> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %60 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %61 = arith.cmpi slt, %59, %60 : tensor<1x32xi32> loc(#loc16)
      %62 = tt.broadcast %58 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %63 = tt.broadcast %61 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %64 = arith.andi %62, %63 : tensor<64x32xi1> loc(#loc17)
      %65 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %66 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %67 = arith.muli %65, %66 : tensor<64x1xi32> loc(#loc19)
      %68 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %69 = tt.addptr %68, %67 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %70 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %71 = tt.broadcast %69 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc22)
      %72 = tt.broadcast %70 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc22)
      %73 = tt.addptr %71, %72 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc22)
      %74 = tt.load %73, %64 : tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %75 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc24)
      %76 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc25)
      %77 = arith.cmpi slt, %75, %76 : tensor<32x1xi32> loc(#loc25)
      %78 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc26)
      %79 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc27)
      %80 = arith.cmpi slt, %78, %79 : tensor<1x64xi32> loc(#loc27)
      %81 = tt.broadcast %77 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc28)
      %82 = tt.broadcast %80 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc28)
      %83 = arith.andi %81, %82 : tensor<32x64xi1> loc(#loc28)
      %84 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc29)
      %85 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc30)
      %86 = arith.muli %84, %85 : tensor<32x1xi32> loc(#loc30)
      %87 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc31)
      %88 = tt.addptr %87, %86 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc31)
      %89 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc32)
      %90 = tt.broadcast %88 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc33)
      %91 = tt.broadcast %89 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc33)
      %92 = tt.addptr %90, %91 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc33)
      %93 = tt.load %92, %83 : tensor<32x64x!tt.ptr<f32>> loc(#loc34)
      %94 = tt.dot %74, %93, %cst : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc35)
      %95 = arith.addf %arg12, %94 : tensor<64x64xf32> loc(#loc36)
      scf.yield %95 : tensor<64x64xf32> loc(#loc37)
    } loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc38)
    %12 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc39)
    %13 = arith.cmpi slt, %11, %12 : tensor<64x1xi32> loc(#loc39)
    %14 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc40)
    %15 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc41)
    %16 = arith.cmpi slt, %14, %15 : tensor<1x64xi32> loc(#loc41)
    %17 = tt.broadcast %13 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc42)
    %18 = tt.broadcast %16 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc42)
    %19 = arith.andi %17, %18 : tensor<64x64xi1> loc(#loc42)
    %20 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc43)
    %21 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc44)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc44)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc45)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc45)
    %25 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc46)
    %26 = tt.broadcast %24 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %27 = tt.broadcast %25 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc47)
    %28 = tt.addptr %26, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc47)
    %29 = tt.load %28, %19 : tensor<64x64x!tt.ptr<f32>> loc(#loc48)
    %30 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc49)
    %31 = arith.mulf %30, %10 : tensor<64x64xf32> loc(#loc49)
    %32 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc50)
    %33 = arith.mulf %32, %29 : tensor<64x64xf32> loc(#loc50)
    %34 = arith.addf %31, %33 : tensor<64x64xf32> loc(#loc51)
    %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc52)
    %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc53)
    %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc53)
    %38 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc54)
    %39 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc55)
    %40 = arith.cmpi slt, %38, %39 : tensor<1x64xi32> loc(#loc55)
    %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc56)
    %42 = tt.broadcast %40 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc56)
    %43 = arith.andi %41, %42 : tensor<64x64xi1> loc(#loc56)
    %44 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc57)
    %45 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc58)
    %46 = arith.muli %44, %45 : tensor<64x1xi32> loc(#loc58)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc59)
    %48 = tt.addptr %47, %46 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc59)
    %49 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc60)
    %50 = tt.broadcast %48 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc61)
    %51 = tt.broadcast %49 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc61)
    %52 = tt.addptr %50, %51 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc61)
    tt.store %52, %34, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %53 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %54 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %55 = arith.addi %54, %53 : tensor<32xi32> loc(#loc12)
      %56 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %57 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %58 = arith.cmpi slt, %56, %57 : tensor<64x1xi32> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %60 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %61 = arith.cmpi slt, %59, %60 : tensor<1x32xi32> loc(#loc16)
      %62 = tt.broadcast %58 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %63 = tt.broadcast %61 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %64 = arith.andi %62, %63 : tensor<64x32xi1> loc(#loc17)
      %65 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %66 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %67 = arith.muli %65, %66 : tensor<64x1xi32> loc(#loc19)
      %68 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %69 = tt.addptr %68, %67 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %70 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %71 = tt.broadcast %69 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc22)
      %72 = tt.broadcast %70 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc22)
      %73 = tt.addptr %71, %72 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc22)
      %74 = tt.load %73, %64 : tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %75 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc24)
      %76 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc25)
      %77 = arith.cmpi slt, %75, %76 : tensor<32x1xi32> loc(#loc25)
      %78 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc26)
      %79 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc27)
      %80 = arith.cmpi slt, %78, %79 : tensor<1x64xi32> loc(#loc27)
      %81 = tt.broadcast %77 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc28)
      %82 = tt.broadcast %80 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc28)
      %83 = arith.andi %81, %82 : tensor<32x64xi1> loc(#loc28)
      %84 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc29)
      %85 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc30)
      %86 = arith.muli %84, %85 : tensor<32x1xi32> loc(#loc30)
      %87 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc31)
      %88 = tt.addptr %87, %86 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc31)
      %89 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc32)
      %90 = tt.broadcast %88 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc33)
      %91 = tt.broadcast %89 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc33)
      %92 = tt.addptr %90, %91 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc33)
      %93 = tt.load %92, %83 : tensor<32x64x!tt.ptr<f32>> loc(#loc34)
      %94 = tt.dot %74, %93, %cst : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc35)
      %95 = arith.addf %arg12, %94 : tensor<64x64xf32> loc(#loc36)
      scf.yield %95 : tensor<64x64xf32> loc(#loc37)
    } loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc38)
    %12 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc39)
    %13 = arith.cmpi slt, %11, %12 : tensor<64x1xi32> loc(#loc39)
    %14 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc40)
    %15 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc41)
    %16 = arith.cmpi slt, %14, %15 : tensor<1x64xi32> loc(#loc41)
    %17 = tt.broadcast %13 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc42)
    %18 = tt.broadcast %16 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc42)
    %19 = arith.andi %17, %18 : tensor<64x64xi1> loc(#loc42)
    %20 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc43)
    %21 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc44)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc44)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc45)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc45)
    %25 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc46)
    %26 = tt.broadcast %24 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %27 = tt.broadcast %25 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc47)
    %28 = tt.addptr %26, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc47)
    %29 = tt.load %28, %19 : tensor<64x64x!tt.ptr<f32>> loc(#loc48)
    %30 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc49)
    %31 = arith.mulf %30, %10 : tensor<64x64xf32> loc(#loc49)
    %32 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc50)
    %33 = arith.mulf %32, %29 : tensor<64x64xf32> loc(#loc50)
    %34 = arith.addf %31, %33 : tensor<64x64xf32> loc(#loc51)
    %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc52)
    %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc53)
    %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc53)
    %38 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc54)
    %39 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc55)
    %40 = arith.cmpi slt, %38, %39 : tensor<1x64xi32> loc(#loc55)
    %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc56)
    %42 = tt.broadcast %40 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc56)
    %43 = arith.andi %41, %42 : tensor<64x64xi1> loc(#loc56)
    %44 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc57)
    %45 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc58)
    %46 = arith.muli %44, %45 : tensor<64x1xi32> loc(#loc58)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc59)
    %48 = tt.addptr %47, %46 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc59)
    %49 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc60)
    %50 = tt.broadcast %48 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc61)
    %51 = tt.broadcast %49 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc61)
    %52 = tt.addptr %50, %51 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc61)
    tt.store %52, %34, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:15)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc63 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %53 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %54 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %55 = arith.addi %54, %53 : tensor<32xi32> loc(#loc12)
      %56 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %57 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %58 = arith.cmpi slt, %56, %57 : tensor<64x1xi32> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %60 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %61 = arith.cmpi slt, %59, %60 : tensor<1x32xi32> loc(#loc16)
      %62 = tt.broadcast %58 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %63 = tt.broadcast %61 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %64 = arith.andi %62, %63 : tensor<64x32xi1> loc(#loc17)
      %65 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %66 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %67 = arith.muli %65, %66 : tensor<64x1xi32> loc(#loc19)
      %68 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %69 = tt.addptr %68, %67 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %70 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %71 = tt.broadcast %69 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc22)
      %72 = tt.broadcast %70 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc22)
      %73 = tt.addptr %71, %72 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc22)
      %74 = tt.load %73, %64 : tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %75 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc24)
      %76 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc25)
      %77 = arith.cmpi slt, %75, %76 : tensor<32x1xi32> loc(#loc25)
      %78 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc26)
      %79 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc27)
      %80 = arith.cmpi slt, %78, %79 : tensor<1x64xi32> loc(#loc27)
      %81 = tt.broadcast %77 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc28)
      %82 = tt.broadcast %80 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc28)
      %83 = arith.andi %81, %82 : tensor<32x64xi1> loc(#loc28)
      %84 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc29)
      %85 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc30)
      %86 = arith.muli %84, %85 : tensor<32x1xi32> loc(#loc30)
      %87 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc31)
      %88 = tt.addptr %87, %86 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc31)
      %89 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc32)
      %90 = tt.broadcast %88 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc33)
      %91 = tt.broadcast %89 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc33)
      %92 = tt.addptr %90, %91 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc33)
      %93 = tt.load %92, %83 : tensor<32x64x!tt.ptr<f32>> loc(#loc34)
      %94 = tt.dot %74, %93, %arg12 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc35)
      scf.yield %94 : tensor<64x64xf32> loc(#loc36)
    } loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc37)
    %12 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc38)
    %13 = arith.cmpi slt, %11, %12 : tensor<64x1xi32> loc(#loc38)
    %14 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc39)
    %15 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc40)
    %16 = arith.cmpi slt, %14, %15 : tensor<1x64xi32> loc(#loc40)
    %17 = tt.broadcast %13 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc41)
    %18 = tt.broadcast %16 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc41)
    %19 = arith.andi %17, %18 : tensor<64x64xi1> loc(#loc41)
    %20 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc42)
    %21 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc43)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc43)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc44)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc44)
    %25 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc45)
    %26 = tt.broadcast %24 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc46)
    %27 = tt.broadcast %25 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc46)
    %28 = tt.addptr %26, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc46)
    %29 = tt.load %28, %19 : tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %30 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc48)
    %31 = arith.mulf %30, %10 : tensor<64x64xf32> loc(#loc48)
    %32 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc49)
    %33 = arith.mulf %32, %29 : tensor<64x64xf32> loc(#loc49)
    %34 = arith.addf %31, %33 : tensor<64x64xf32> loc(#loc50)
    %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc51)
    %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc52)
    %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc52)
    %38 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc53)
    %39 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc54)
    %40 = arith.cmpi slt, %38, %39 : tensor<1x64xi32> loc(#loc54)
    %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc55)
    %42 = tt.broadcast %40 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc55)
    %43 = arith.andi %41, %42 : tensor<64x64xi1> loc(#loc55)
    %44 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc56)
    %45 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc57)
    %46 = arith.muli %44, %45 : tensor<64x1xi32> loc(#loc57)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc58)
    %48 = tt.addptr %47, %46 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc58)
    %49 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc59)
    %50 = tt.broadcast %48 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc60)
    %51 = tt.broadcast %49 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc60)
    %52 = tt.addptr %50, %51 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc60)
    tt.store %52, %34, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc61)
    tt.return loc(#loc62)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %53 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc11)
      %54 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc12)
      %55 = arith.addi %54, %53 : tensor<32xi32> loc(#loc12)
      %56 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %57 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc14)
      %58 = arith.cmpi slt, %56, %57 : tensor<64x1xi32> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc15)
      %60 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc16)
      %61 = arith.cmpi slt, %59, %60 : tensor<1x32xi32> loc(#loc16)
      %62 = tt.broadcast %58 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc17)
      %63 = tt.broadcast %61 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc17)
      %64 = arith.andi %62, %63 : tensor<64x32xi1> loc(#loc17)
      %65 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc18)
      %66 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc19)
      %67 = arith.muli %65, %66 : tensor<64x1xi32> loc(#loc19)
      %68 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc20)
      %69 = tt.addptr %68, %67 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc20)
      %70 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc21)
      %71 = tt.broadcast %69 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc22)
      %72 = tt.broadcast %70 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc22)
      %73 = tt.addptr %71, %72 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc22)
      %74 = tt.load %73, %64 : tensor<64x32x!tt.ptr<f32>> loc(#loc23)
      %75 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc24)
      %76 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc25)
      %77 = arith.cmpi slt, %75, %76 : tensor<32x1xi32> loc(#loc25)
      %78 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc26)
      %79 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc27)
      %80 = arith.cmpi slt, %78, %79 : tensor<1x64xi32> loc(#loc27)
      %81 = tt.broadcast %77 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc28)
      %82 = tt.broadcast %80 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc28)
      %83 = arith.andi %81, %82 : tensor<32x64xi1> loc(#loc28)
      %84 = tt.expand_dims %55 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc29)
      %85 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc30)
      %86 = arith.muli %84, %85 : tensor<32x1xi32> loc(#loc30)
      %87 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc31)
      %88 = tt.addptr %87, %86 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc31)
      %89 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc32)
      %90 = tt.broadcast %88 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc33)
      %91 = tt.broadcast %89 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc33)
      %92 = tt.addptr %90, %91 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc33)
      %93 = tt.load %92, %83 : tensor<32x64x!tt.ptr<f32>> loc(#loc34)
      %94 = tt.dot %74, %93, %arg12 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc35)
      scf.yield %94 : tensor<64x64xf32> loc(#loc36)
    } loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc37)
    %12 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc38)
    %13 = arith.cmpi slt, %11, %12 : tensor<64x1xi32> loc(#loc38)
    %14 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc39)
    %15 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc40)
    %16 = arith.cmpi slt, %14, %15 : tensor<1x64xi32> loc(#loc40)
    %17 = tt.broadcast %13 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc41)
    %18 = tt.broadcast %16 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc41)
    %19 = arith.andi %17, %18 : tensor<64x64xi1> loc(#loc41)
    %20 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc42)
    %21 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc43)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc43)
    %23 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc44)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc44)
    %25 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc45)
    %26 = tt.broadcast %24 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc46)
    %27 = tt.broadcast %25 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc46)
    %28 = tt.addptr %26, %27 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc46)
    %29 = tt.load %28, %19 : tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %30 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc48)
    %31 = arith.mulf %30, %10 : tensor<64x64xf32> loc(#loc48)
    %32 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc49)
    %33 = arith.mulf %32, %29 : tensor<64x64xf32> loc(#loc49)
    %34 = arith.addf %31, %33 : tensor<64x64xf32> loc(#loc50)
    %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc51)
    %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc52)
    %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc52)
    %38 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc53)
    %39 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc54)
    %40 = arith.cmpi slt, %38, %39 : tensor<1x64xi32> loc(#loc54)
    %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc55)
    %42 = tt.broadcast %40 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc55)
    %43 = arith.andi %41, %42 : tensor<64x64xi1> loc(#loc55)
    %44 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc56)
    %45 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc57)
    %46 = arith.muli %44, %45 : tensor<64x1xi32> loc(#loc57)
    %47 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc58)
    %48 = tt.addptr %47, %46 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc58)
    %49 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc59)
    %50 = tt.broadcast %48 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc60)
    %51 = tt.broadcast %49 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc60)
    %52 = tt.addptr %50, %51 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc60)
    tt.store %52, %34, %43 : tensor<64x64x!tt.ptr<f32>> loc(#loc61)
    tt.return loc(#loc62)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:44)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:35)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:63)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:35)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:63)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:31)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:59)
#loc46 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc47 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc48 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc49 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc50 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc51 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:31)
#loc52 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:42)
#loc53 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:55)
#loc54 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:66)
#loc55 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:48)
#loc56 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:28)
#loc57 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:37)
#loc58 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:21)
#loc59 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:56)
#loc60 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:49)
#loc61 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc62 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %32 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
      %33 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc11)
      %34 = arith.addi %33, %32 : tensor<32xi32> loc(#loc11)
      %35 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc12)
      %36 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc13)
      %37 = arith.cmpi slt, %35, %36 : tensor<64x1xi32> loc(#loc13)
      %38 = tt.expand_dims %34 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc14)
      %39 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc15)
      %40 = arith.cmpi slt, %38, %39 : tensor<1x32xi32> loc(#loc15)
      %41 = tt.broadcast %37 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc16)
      %42 = tt.broadcast %40 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc16)
      %43 = arith.andi %41, %42 : tensor<64x32xi1> loc(#loc16)
      %44 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc17)
      %45 = arith.muli %35, %44 : tensor<64x1xi32> loc(#loc17)
      %46 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc18)
      %47 = tt.addptr %46, %45 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc18)
      %48 = tt.broadcast %47 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc19)
      %49 = tt.broadcast %38 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc19)
      %50 = tt.addptr %48, %49 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc19)
      %51 = tt.load %50, %43 : tensor<64x32x!tt.ptr<f32>> loc(#loc20)
      %52 = tt.expand_dims %34 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc21)
      %53 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc22)
      %54 = arith.cmpi slt, %52, %53 : tensor<32x1xi32> loc(#loc22)
      %55 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc23)
      %56 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc24)
      %57 = arith.cmpi slt, %55, %56 : tensor<1x64xi32> loc(#loc24)
      %58 = tt.broadcast %54 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc25)
      %59 = tt.broadcast %57 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc25)
      %60 = arith.andi %58, %59 : tensor<32x64xi1> loc(#loc25)
      %61 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc26)
      %62 = arith.muli %52, %61 : tensor<32x1xi32> loc(#loc26)
      %63 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc27)
      %64 = tt.addptr %63, %62 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc27)
      %65 = tt.broadcast %64 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc28)
      %66 = tt.broadcast %55 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc28)
      %67 = tt.addptr %65, %66 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc28)
      %68 = tt.load %67, %60 : tensor<32x64x!tt.ptr<f32>> loc(#loc29)
      %69 = tt.dot %51, %68, %arg12 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %69 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc9)
    %10 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %11 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc33)
    %12 = arith.cmpi slt, %10, %11 : tensor<64x1xi32> loc(#loc33)
    %13 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc34)
    %14 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc35)
    %15 = arith.cmpi slt, %13, %14 : tensor<1x64xi32> loc(#loc35)
    %16 = tt.broadcast %12 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc36)
    %17 = tt.broadcast %15 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc36)
    %18 = arith.andi %16, %17 : tensor<64x64xi1> loc(#loc36)
    %19 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc37)
    %20 = arith.muli %10, %19 : tensor<64x1xi32> loc(#loc37)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc38)
    %22 = tt.addptr %21, %20 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc38)
    %23 = tt.broadcast %22 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc39)
    %24 = tt.broadcast %13 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc39)
    %25 = tt.addptr %23, %24 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc39)
    %26 = tt.load %25, %18 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    %27 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc41)
    %28 = arith.mulf %27, %9 : tensor<64x64xf32> loc(#loc41)
    %29 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc42)
    %30 = arith.mulf %29, %26 : tensor<64x64xf32> loc(#loc42)
    %31 = arith.addf %28, %30 : tensor<64x64xf32> loc(#loc43)
    tt.store %25, %31, %18 : tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %10 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc10)
    %11 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc11)
    %12 = arith.cmpi slt, %10, %11 : tensor<64x1xi32> loc(#loc11)
    %13 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc12)
    %14 = tt.broadcast %12 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc13)
    %15 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc14)
    %16 = arith.muli %10, %15 : tensor<64x1xi32> loc(#loc14)
    %17 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc15)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc15)
    %19 = tt.broadcast %18 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc17)
    %21 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc18)
    %22 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc19)
    %23 = arith.cmpi slt, %21, %22 : tensor<1x64xi32> loc(#loc19)
    %24 = tt.broadcast %23 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc20)
    %25 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc21)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc22)
    %27 = tt.broadcast %21 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc23)
    %28 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %51 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc25)
      %52 = arith.addi %51, %9 : tensor<32xi32> loc(#loc25)
      %53 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc26)
      %54 = arith.cmpi slt, %53, %13 : tensor<1x32xi32> loc(#loc12)
      %55 = tt.broadcast %54 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc13)
      %56 = arith.andi %14, %55 : tensor<64x32xi1> loc(#loc13)
      %57 = tt.broadcast %53 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc16)
      %58 = tt.addptr %19, %57 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc16)
      %59 = tt.load %58, %56 : tensor<64x32x!tt.ptr<f32>> loc(#loc27)
      %60 = tt.expand_dims %52 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc28)
      %61 = arith.cmpi slt, %60, %20 : tensor<32x1xi32> loc(#loc17)
      %62 = tt.broadcast %61 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc20)
      %63 = arith.andi %62, %24 : tensor<32x64xi1> loc(#loc20)
      %64 = arith.muli %60, %25 : tensor<32x1xi32> loc(#loc21)
      %65 = tt.addptr %26, %64 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc22)
      %66 = tt.broadcast %65 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc23)
      %67 = tt.addptr %66, %27 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc23)
      %68 = tt.load %67, %63 : tensor<32x64x!tt.ptr<f32>> loc(#loc29)
      %69 = tt.dot %59, %68, %arg12 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %69 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc24)
    %29 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %30 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc33)
    %31 = arith.cmpi slt, %29, %30 : tensor<64x1xi32> loc(#loc33)
    %32 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc34)
    %33 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc35)
    %34 = arith.cmpi slt, %32, %33 : tensor<1x64xi32> loc(#loc35)
    %35 = tt.broadcast %31 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc36)
    %36 = tt.broadcast %34 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc36)
    %37 = arith.andi %35, %36 : tensor<64x64xi1> loc(#loc36)
    %38 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc37)
    %39 = arith.muli %29, %38 : tensor<64x1xi32> loc(#loc37)
    %40 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc38)
    %41 = tt.addptr %40, %39 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc38)
    %42 = tt.broadcast %41 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc39)
    %43 = tt.broadcast %32 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc39)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc39)
    %45 = tt.load %44, %37 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    %46 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc41)
    %47 = arith.mulf %46, %28 : tensor<64x64xf32> loc(#loc41)
    %48 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc42)
    %49 = arith.mulf %48, %45 : tensor<64x64xf32> loc(#loc42)
    %50 = arith.addf %47, %49 : tensor<64x64xf32> loc(#loc43)
    tt.store %44, %50, %37 : tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %10 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc10)
    %11 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc11)
    %12 = arith.cmpi slt, %10, %11 : tensor<64x1xi32> loc(#loc11)
    %13 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc12)
    %14 = tt.broadcast %12 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc13)
    %15 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc14)
    %16 = arith.muli %10, %15 : tensor<64x1xi32> loc(#loc14)
    %17 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc15)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc15)
    %19 = tt.broadcast %18 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc17)
    %21 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc18)
    %22 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc19)
    %23 = arith.cmpi slt, %21, %22 : tensor<1x64xi32> loc(#loc19)
    %24 = tt.broadcast %23 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc20)
    %25 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc21)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc22)
    %27 = tt.broadcast %21 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc23)
    %28 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %51 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc25)
      %52 = arith.addi %51, %9 : tensor<32xi32> loc(#loc25)
      %53 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc26)
      %54 = arith.cmpi slt, %53, %13 : tensor<1x32xi32> loc(#loc12)
      %55 = tt.broadcast %54 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc13)
      %56 = arith.andi %14, %55 : tensor<64x32xi1> loc(#loc13)
      %57 = tt.broadcast %53 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc16)
      %58 = tt.addptr %19, %57 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc16)
      %59 = tt.load %58, %56 : tensor<64x32x!tt.ptr<f32>> loc(#loc27)
      %60 = tt.expand_dims %52 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc28)
      %61 = arith.cmpi slt, %60, %20 : tensor<32x1xi32> loc(#loc17)
      %62 = tt.broadcast %61 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc20)
      %63 = arith.andi %62, %24 : tensor<32x64xi1> loc(#loc20)
      %64 = arith.muli %60, %25 : tensor<32x1xi32> loc(#loc21)
      %65 = tt.addptr %26, %64 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc22)
      %66 = tt.broadcast %65 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc23)
      %67 = tt.addptr %66, %27 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc23)
      %68 = tt.load %67, %63 : tensor<32x64x!tt.ptr<f32>> loc(#loc29)
      %69 = tt.dot %59, %68, %arg12 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %69 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc24)
    %29 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %30 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc33)
    %31 = arith.cmpi slt, %29, %30 : tensor<64x1xi32> loc(#loc33)
    %32 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc34)
    %33 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc35)
    %34 = arith.cmpi slt, %32, %33 : tensor<1x64xi32> loc(#loc35)
    %35 = tt.broadcast %31 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc36)
    %36 = tt.broadcast %34 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc36)
    %37 = arith.andi %35, %36 : tensor<64x64xi1> loc(#loc36)
    %38 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc37)
    %39 = arith.muli %29, %38 : tensor<64x1xi32> loc(#loc37)
    %40 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc38)
    %41 = tt.addptr %40, %39 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc38)
    %42 = tt.broadcast %41 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc39)
    %43 = tt.broadcast %32 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc39)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc39)
    %45 = tt.load %44, %37 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    %46 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc41)
    %47 = arith.mulf %46, %28 : tensor<64x64xf32> loc(#loc41)
    %48 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc42)
    %49 = arith.mulf %48, %45 : tensor<64x64xf32> loc(#loc42)
    %50 = arith.addf %47, %49 : tensor<64x64xf32> loc(#loc43)
    tt.store %44, %50, %37 : tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)
module {
  tt.func public @gemm_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg9: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0), %arg10: f32 loc("/home/along/triton_shared/python/examples/test_gemm.py":29:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %10 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc10)
    %11 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc11)
    %12 = arith.cmpi slt, %10, %11 : tensor<64x1xi32> loc(#loc11)
    %13 = tt.splat %arg5 : i32 -> tensor<1x32xi32> loc(#loc12)
    %14 = tt.broadcast %12 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc13)
    %15 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc14)
    %16 = arith.muli %10, %15 : tensor<64x1xi32> loc(#loc14)
    %17 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc15)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc15)
    %19 = tt.broadcast %18 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x32x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.splat %arg5 : i32 -> tensor<32x1xi32> loc(#loc17)
    %21 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc18)
    %22 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc19)
    %23 = arith.cmpi slt, %21, %22 : tensor<1x64xi32> loc(#loc19)
    %24 = tt.broadcast %23 : tensor<1x64xi1> -> tensor<32x64xi1> loc(#loc20)
    %25 = tt.splat %arg7 : i32 -> tensor<32x1xi32> loc(#loc21)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc22)
    %27 = tt.broadcast %21 : tensor<1x64xi32> -> tensor<32x64xi32> loc(#loc23)
    %28 = scf.for %arg11 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg12 = %cst) -> (tensor<64x64xf32>)  : i32 {
      %51 = tt.splat %arg11 : i32 -> tensor<32xi32> loc(#loc25)
      %52 = arith.addi %51, %9 : tensor<32xi32> loc(#loc25)
      %53 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc26)
      %54 = arith.cmpi slt, %53, %13 : tensor<1x32xi32> loc(#loc12)
      %55 = tt.broadcast %54 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc13)
      %56 = arith.andi %14, %55 : tensor<64x32xi1> loc(#loc13)
      %57 = tt.broadcast %53 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc16)
      %58 = tt.addptr %19, %57 : tensor<64x32x!tt.ptr<f32>>, tensor<64x32xi32> loc(#loc16)
      %59 = tt.load %58, %56 : tensor<64x32x!tt.ptr<f32>> loc(#loc27)
      %60 = tt.expand_dims %52 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc28)
      %61 = arith.cmpi slt, %60, %20 : tensor<32x1xi32> loc(#loc17)
      %62 = tt.broadcast %61 : tensor<32x1xi1> -> tensor<32x64xi1> loc(#loc20)
      %63 = arith.andi %62, %24 : tensor<32x64xi1> loc(#loc20)
      %64 = arith.muli %60, %25 : tensor<32x1xi32> loc(#loc21)
      %65 = tt.addptr %26, %64 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc22)
      %66 = tt.broadcast %65 : tensor<32x1x!tt.ptr<f32>> -> tensor<32x64x!tt.ptr<f32>> loc(#loc23)
      %67 = tt.addptr %66, %27 : tensor<32x64x!tt.ptr<f32>>, tensor<32x64xi32> loc(#loc23)
      %68 = tt.load %67, %63 : tensor<32x64x!tt.ptr<f32>> loc(#loc29)
      %69 = tt.dot %59, %68, %arg12 : tensor<64x32xf32> * tensor<32x64xf32> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %69 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc24)
    %29 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %30 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc33)
    %31 = arith.cmpi slt, %29, %30 : tensor<64x1xi32> loc(#loc33)
    %32 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc34)
    %33 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc35)
    %34 = arith.cmpi slt, %32, %33 : tensor<1x64xi32> loc(#loc35)
    %35 = tt.broadcast %31 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc36)
    %36 = tt.broadcast %34 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc36)
    %37 = arith.andi %35, %36 : tensor<64x64xi1> loc(#loc36)
    %38 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc37)
    %39 = arith.muli %29, %38 : tensor<64x1xi32> loc(#loc37)
    %40 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc38)
    %41 = tt.addptr %40, %39 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc38)
    %42 = tt.broadcast %41 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc39)
    %43 = tt.broadcast %32 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc39)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc39)
    %45 = tt.load %44, %37 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    %46 = tt.splat %arg9 : f32 -> tensor<64x64xf32> loc(#loc41)
    %47 = arith.mulf %46, %28 : tensor<64x64xf32> loc(#loc41)
    %48 = tt.splat %arg10 : f32 -> tensor<64x64xf32> loc(#loc42)
    %49 = arith.mulf %48, %45 : tensor<64x64xf32> loc(#loc42)
    %50 = arith.addf %47, %49 : tensor<64x64xf32> loc(#loc43)
    tt.store %44, %50, %37 : tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/along/triton_shared/python/examples/test_gemm.py":38:26)
#loc3 = loc("/home/along/triton_shared/python/examples/test_gemm.py":39:26)
#loc4 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:21)
#loc5 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:44)
#loc6 = loc("/home/along/triton_shared/python/examples/test_gemm.py":40:31)
#loc7 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:21)
#loc8 = loc("/home/along/triton_shared/python/examples/test_gemm.py":41:31)
#loc9 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:35)
#loc10 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:33)
#loc11 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:44)
#loc12 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:68)
#loc13 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:50)
#loc14 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:44)
#loc15 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:28)
#loc16 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:56)
#loc17 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:44)
#loc18 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:57)
#loc19 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:68)
#loc20 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:50)
#loc21 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:44)
#loc22 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:28)
#loc23 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:56)
#loc24 = loc("/home/along/triton_shared/python/examples/test_gemm.py":46:26)
#loc25 = loc("/home/along/triton_shared/python/examples/test_gemm.py":47:22)
#loc26 = loc("/home/along/triton_shared/python/examples/test_gemm.py":49:57)
#loc27 = loc("/home/along/triton_shared/python/examples/test_gemm.py":48:20)
#loc28 = loc("/home/along/triton_shared/python/examples/test_gemm.py":51:33)
#loc29 = loc("/home/along/triton_shared/python/examples/test_gemm.py":50:20)
#loc30 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:25)
#loc31 = loc("/home/along/triton_shared/python/examples/test_gemm.py":52:8)
#loc32 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:29)
#loc33 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:40)
#loc34 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:53)
#loc35 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:64)
#loc36 = loc("/home/along/triton_shared/python/examples/test_gemm.py":55:46)
#loc37 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:40)
#loc38 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:24)
#loc39 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:52)
#loc40 = loc("/home/along/triton_shared/python/examples/test_gemm.py":54:16)
#loc41 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:18)
#loc42 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:31)
#loc43 = loc("/home/along/triton_shared/python/examples/test_gemm.py":56:24)
#loc44 = loc("/home/along/triton_shared/python/examples/test_gemm.py":58:13)
#loc45 = loc("/home/along/triton_shared/python/examples/test_gemm.py":57:4)


